D:\thesis\sss\model.py:64: UserWarning: 1Torch was not compiled with flash attention. (Triggered internally at C:\cb\pytorch_1000000000000\work\aten\src\ATen\native\transformers\cuda\sdp_utils.cpp:455.)
  y = torch.nn.functional.scaled_dot_product_attention(q, k, v, attn_mask=None, dropout_p=self.dropout if self.training else 0, is_causal=True)
step 0: train loss 10.9997, val loss 10.9993
GPU Memory before iteration 0:
  Total: 4.29 GB
  Reserved: 2.74 GB
  Allocated: 0.51 GB
  Free: 1.56 GB
  Estimated memory for this iteration: 15.56 GB
iter 0: loss 10.9712, time 60236.67ms, mfu -100.00%
Time stamp: 2024-07-08 21:00:19, Time since last checkpoint: 0:01:00
GPU Memory before iteration 10:
  Total: 4.29 GB
  Reserved: 5.83 GB
  Allocated: 1.82 GB
  Free: -1.54 GB
  Estimated memory for this iteration: 15.56 GB
iter 10: loss 10.4471, time 60630.97ms, mfu 0.31%
Time stamp: 2024-07-08 21:10:06, Time since last checkpoint: 0:09:47
GPU Memory before iteration 20:
  Total: 4.29 GB
  Reserved: 5.83 GB
  Allocated: 1.82 GB
  Free: -1.54 GB
  Estimated memory for this iteration: 15.56 GB
iter 20: loss 9.7407, time 60621.27ms, mfu 0.31%
Time stamp: 2024-07-08 21:19:31, Time since last checkpoint: 0:09:24
GPU Memory before iteration 30:
  Total: 4.29 GB
  Reserved: 5.83 GB
  Allocated: 1.82 GB
  Free: -1.54 GB
  Estimated memory for this iteration: 15.56 GB
iter 30: loss 9.4218, time 57842.62ms, mfu 0.31%
Time stamp: 2024-07-08 21:28:52, Time since last checkpoint: 0:09:20
Traceback (most recent call last):
  File "D:\thesis\sss\train.py", line 340, in <module>
    scaler.scale(loss).backward()
  File "C:\Users\Ronald\miniconda3\envs\torchenv\lib\site-packages\torch\_tensor.py", line 525, in backward
    torch.autograd.backward(
  File "C:\Users\Ronald\miniconda3\envs\torchenv\lib\site-packages\torch\autograd\__init__.py", line 267, in backward
    _engine_run_backward(
  File "C:\Users\Ronald\miniconda3\envs\torchenv\lib\site-packages\torch\autograd\graph.py", line 744, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt